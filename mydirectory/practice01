#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
};

struct node *start = NULL;

void insertFirst();
void insertLast();
void deleteFirst();
void deleteLast();
void deleteAtPosition(int pos);
void display();
int nodeCount();

int main()
{
    int ch;
    while (1)
    {
        printf("\n 1. Insert at first position");
        printf("\n 2. Insert at last position");
        printf("\n 3. Delete from first position");
        printf("\n 4. Delete from last position");
        printf("\n 5. Delete node at a given position");
        printf("\n 6. Count the number of nodes");
        printf("\n 7. Display the list");
        printf("\n 8. Exit");
        printf("\n Enter your choice: ");
        scanf("%d", &ch);

        switch (ch)
        {
        case 1:
            insertFirst();
            break;
        case 2:
            insertLast();
            break;
        case 3:
            deleteFirst();
            break;
        case 4:
            deleteLast();
            break;
        case 5:
            printf("\n Enter the position to delete: ");
            int pos;
            scanf("%d", &pos);
            deleteAtPosition(pos);
            break;
        case 6:
            printf("\n Number of nodes: %d", nodeCount());
            break;
        case 7:
            display();
            break;
        case 8:
            exit(0);
        default:
            printf("\n Invalid choice");
        }
    }

    return 0;
}

void insertFirst()
{
    struct node *p = (struct node *)malloc(sizeof(struct node));
    printf("\n Enter data: ");
    scanf("%d", &(p->data));
    p->link = start;
    start = p;
    printf("\n Node inserted at the first position.");
}

void insertLast()
{
    struct node *p = (struct node *)malloc(sizeof(struct node));
    printf("\n Enter data: ");
    scanf("%d", &(p->data));
    p->link = NULL;
    if (start == NULL)
    {
        start = p;
    }
    else
    {
        struct node *q = start;
        while (q->link != NULL)
        {
            q = q->link;
        }
        q->link = p;
    }
    printf("\n Node inserted at the last position.");
}

void deleteFirst()
{
    if (start == NULL)
    {
        printf("\n Empty linked list.");
        return;
    }

    struct node *p = start;
    start = start->link;
    p->link = NULL;
    printf("\n Deleted item: %d", p->data);
    free(p);
}

void deleteLast()
{
    if (start == NULL)
    {
        printf("\n Empty linked list.");
        return;
    }

    struct node *p = start;
    struct node *q = NULL;
    while (p->link != NULL)
    {
        q = p;
        p = p->link;
    }
    if (q != NULL)
    {
        q->link = NULL;
    }
    else
    {
        start = NULL;
    }
    printf("\n Deleted item: %d", p->data);
    free(p);
}

void deleteAtPosition(int pos)
{
    if (start == NULL)
    {
        printf("\n Empty linked list.");
        return;
    }

    if (pos <= 0)
    {
        printf("\n Invalid position.");
        return;
    }

    if (pos == 1)
    {
        deleteFirst();
        return;
    }

    int count = 1;
    struct node *p = start;
    struct node *q = NULL;
    while (count < pos && p != NULL)
    {
        q = p;
        p = p->link;
        count++;
    }

    if (p == NULL)
    {
        printf("\n Invalid position.");
        return;
    }

    q->link = p->link;
    p->link = NULL;
    printf("\n Deleted item: %d", p->data);
    free(p);
}

void display()
{
    if (start == NULL)
    {
        printf("\n Empty linked list.");
        return;
    }

    printf("\n Linked list: ");
    struct node *p = start;
    while (p != NULL)
    {
        printf("%d ", p->data);
        p = p->link;
    }
}

int nodeCount()
{
    int count = 0;
    struct node *p = start;
    while (p != NULL)
    {
        count++;
        p = p->link;
    }
    return count;
}